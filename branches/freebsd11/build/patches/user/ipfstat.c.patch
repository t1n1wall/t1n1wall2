--- ipfstat.c.orig	2013-12-23 11:53:44.000000000 +0000
+++ ipfstat.c	2013-12-23 11:58:26.000000000 +0000
@@ -47,6 +47,9 @@
 #  endif
 # endif
 #endif
+
+#define STATETOP 1
+
 #if defined(STATETOP) && !defined(linux)
 # include <netinet/ip_var.h>
 # include <netinet/tcp_fsm.h>
@@ -60,9 +63,6 @@
 #  ifdef ERR
 #   undef ERR
 #  endif
-#  include <curses.h>
-# else /* SOLARIS */
-#  include <ncurses.h>
 # endif /* SOLARIS */
 #endif /* STATETOP */
 #include "kmem.h"
@@ -179,8 +179,6 @@
 #ifdef STATETOP
 static	void	topipstates __P((i6addr_t, i6addr_t, int, int, int,
 				 int, int, int, int *));
-static	void	sig_break __P((int));
-static	void	sig_resize __P((int));
 static	char	*getip __P((int, i6addr_t *));
 static	char	*ttl_to_string __P((long));
 static	int	sort_p __P((const void *, const void *));
@@ -1294,8 +1292,6 @@
 
 
 #ifdef STATETOP
-static int handle_resize = 0, handle_break = 0;
-
 static void topipstates(saddr, daddr, sport, dport, protocol, ver,
 		        refreshtime, topclosed, filter)
 	i6addr_t saddr;
@@ -1308,39 +1304,17 @@
 	int topclosed;
 	int *filter;
 {
-	char str1[STSTRSIZE], str2[STSTRSIZE], str3[STSTRSIZE], str4[STSTRSIZE];
+	char str1[STSTRSIZE], str2[STSTRSIZE];
 	int maxtsentries = 0, reverse = 0, sorting = STSORT_DEFAULT;
-	int i, j, winy, tsentry, maxx, maxy, redraw = 0, ret = 0;
-	int len, srclen, dstlen, forward = 1, c = 0;
+	int i, tsentry, ret = 0;
+	int len, srclen, dstlen, forward = 1;
 	ips_stat_t ipsst, *ipsstp = &ipsst;
 	int token_type = IPFGENITER_STATE;
 	statetop_t *tstable = NULL, *tp;
 	const char *errstr = "";
 	ipstate_t ips;
 	ipfobj_t ipfo;
-	struct timeval selecttimeout;
-	char hostnm[HOSTNMLEN];
 	struct protoent *proto;
-	fd_set readfd;
-	time_t t;
-
-	/* install signal handlers */
-	signal(SIGINT, sig_break);
-	signal(SIGQUIT, sig_break);
-	signal(SIGTERM, sig_break);
-	signal(SIGWINCH, sig_resize);
-
-	/* init ncurses stuff */
-  	initscr();
-  	cbreak();
-  	noecho();
-	curs_set(0);
-	timeout(0);
-	getmaxyx(stdscr, maxy, maxx);
-
-	/* init hostname */
-	gethostname(hostnm, sizeof(hostnm) - 1);
-	hostnm[sizeof(hostnm) - 1] = '\0';
 
 	/* init ipfobj_t stuff */
 	bzero((caddr_t)&ipfo, sizeof(ipfo));
@@ -1349,15 +1323,12 @@
 	ipfo.ipfo_size = sizeof(*ipsstp);
 	ipfo.ipfo_ptr = (void *)ipsstp;
 
-	/* repeat until user aborts */
-	while ( 1 ) {
-
 		/* get state table */
 		bzero((char *)&ipsst, sizeof(ipsst));
 		if ((ioctl(state_fd, SIOCGETFS, &ipfo) == -1)) {
 			errstr = "ioctl(SIOCGETFS)";
 			ret = -1;
-			goto out;
+			return;
 		}
 
 		/* clear the history */
@@ -1504,132 +1475,11 @@
 			}
 		}
 
-		/* handle window resizes */
-		if (handle_resize) {
-			endwin();
-			initscr();
-			cbreak();
-			noecho();
-			curs_set(0);
-			timeout(0);
-			getmaxyx(stdscr, maxy, maxx);
-			redraw = 1;
-			handle_resize = 0;
-                }
-
-		/* stop program? */
-		if (handle_break)
-			break;
-
-		/* print title */
-		erase();
-		attron(A_BOLD);
-		winy = 0;
-		move(winy,0);
-		sprintf(str1, "%s - %s - state top", hostnm, IPL_VERSION);
-		for (j = 0 ; j < (maxx - 8 - strlen(str1)) / 2; j++)
-			printw(" ");
-		printw("%s", str1);
-		attroff(A_BOLD);
-
-		/* just for fun add a clock */
-		move(winy, maxx - 8);
-		t = time(NULL);
-		strftime(str1, 80, "%T", localtime(&t));
-		printw("%s\n", str1);
-
-		/*
-		 * print the display filters, this is placed in the loop,
-		 * because someday I might add code for changing these
-		 * while the programming is running :-)
-		 */
-		if (sport >= 0)
-			sprintf(str1, "%s,%d", getip(ver, &saddr), sport);
-		else
-			sprintf(str1, "%s", getip(ver, &saddr));
-
-		if (dport >= 0)
-			sprintf(str2, "%s,%d", getip(ver, &daddr), dport);
-		else
-			sprintf(str2, "%s", getip(ver, &daddr));
-
-		if (protocol < 0)
-			strcpy(str3, "any");
-		else if ((proto = getprotobynumber(protocol)) != NULL)
-			sprintf(str3, "%s", proto->p_name);
-		else
-			sprintf(str3, "%d", protocol);
-
-		switch (sorting)
-		{
-		case STSORT_PR:
-			sprintf(str4, "proto");
-			break;
-		case STSORT_PKTS:
-			sprintf(str4, "# pkts");
-			break;
-		case STSORT_BYTES:
-			sprintf(str4, "# bytes");
-			break;
-		case STSORT_TTL:
-			sprintf(str4, "ttl");
-			break;
-		case STSORT_SRCIP:
-			sprintf(str4, "src ip");
-			break;
-		case STSORT_SRCPT:
-			sprintf(str4, "src port");
-			break;
-		case STSORT_DSTIP:
-			sprintf(str4, "dest ip");
-			break;
-		case STSORT_DSTPT:
-			sprintf(str4, "dest port");
-			break;
-		default:
-			sprintf(str4, "unknown");
-			break;
-		}
-
-		if (reverse)
-			strcat(str4, " (reverse)");
-
-		winy += 2;
-		move(winy,0);
-		printw("Src: %s, Dest: %s, Proto: %s, Sorted by: %s\n\n",
-		       str1, str2, str3, str4);
-
-		/*
-		 * For an IPv4 IP address we need at most 15 characters,
-		 * 4 tuples of 3 digits, separated by 3 dots. Enforce this
-		 * length, so the colums do not change positions based
-		 * on the size of the IP address. This length makes the
-		 * output fit in a 80 column terminal.
-		 * We are lacking a good solution for IPv6 addresses (that
-		 * can be longer that 15 characters), so we do not enforce
-		 * a maximum on the IP field size.
-		 */
-		if (srclen < 15)
-			srclen = 15;
-		if (dstlen < 15)
-			dstlen = 15;
-
-		/* print column description */
-		winy += 2;
-		move(winy,0);
-		attron(A_BOLD);
-		printw("%-*s %-*s %3s %4s %7s %9s %9s\n",
-		       srclen + 6, "Source IP", dstlen + 6, "Destination IP",
-		       "ST", "PR", "#pkts", "#bytes", "ttl");
-		attroff(A_BOLD);
-
 		/* print all the entries */
 		tp = tstable;
 		if (reverse)
 			tp += tsentry;
 
-		if (tsentry > maxy - 6)
-			tsentry = maxy - 6;
 		for (i = 0; i <= tsentry; i++) {
 			/* print src/dest and port */
 			if ((tp->st_p == IPPROTO_TCP) ||
@@ -1646,14 +1496,11 @@
 				sprintf(str2, "%s", getip(tp->st_v,
 				    &tp->st_dst));
 			}
-			winy++;
-			move(winy, 0);
-			printw("%-*s %-*s", srclen + 6, str1, dstlen + 6, str2);
+			printf("%s\t%s", str1, str2);
 
 			/* print state */
-			sprintf(str1, "%X/%X", tp->st_state[0],
+			printf("\t%X/%X", tp->st_state[0],
 				tp->st_state[1]);
-			printw(" %3s", str1);
 
 			/* print protocol */
 			proto = getprotobynumber(tp->st_p);
@@ -1666,16 +1513,18 @@
 			/* just print icmp for IPv6-ICMP */
 			if (tp->st_p == IPPROTO_ICMPV6)
 				strcpy(str1, "icmp");
-			printw(" %4s", str1);
+			printf("\t%4s", str1);
 
 			/* print #pkt/#bytes */
 #ifdef	USE_QUAD_T
-			printw(" %7qu %9qu", (unsigned long long) tp->st_pkts,
+			printf("\t%7qu\t%9qu", (unsigned long long) tp->st_pkts,
 				(unsigned long long) tp->st_bytes);
 #else
-			printw(" %7lu %9lu", tp->st_pkts, tp->st_bytes);
+			printf("\t%7lu\t%9lu", tp->st_pkts, tp->st_bytes);
 #endif
-			printw(" %9s", ttl_to_string(tp->st_age));
+			printf("\t%9s", ttl_to_string(tp->st_age));
+			
+			printf("\n");
 
 			if (reverse)
 				tp--;
@@ -1683,55 +1532,6 @@
 				tp++;
 		}
 
-		/* screen data structure is filled, now update the screen */
-		if (redraw)
-			clearok(stdscr,1);
-
-		if (refresh() == ERR)
-			break;
-		if (redraw) {
-			clearok(stdscr,0);
-			redraw = 0;
-		}
-
-		/* wait for key press or a 1 second time out period */
-		selecttimeout.tv_sec = refreshtime;
-		selecttimeout.tv_usec = 0;
-		FD_ZERO(&readfd);
-		FD_SET(0, &readfd);
-		select(1, &readfd, NULL, NULL, &selecttimeout);
-
-		/* if key pressed, read all waiting keys */
-		if (FD_ISSET(0, &readfd)) {
-			c = wgetch(stdscr);
-			if (c == ERR)
-				continue;
-
-			if (ISALPHA(c) && ISUPPER(c))
-				c = TOLOWER(c);
-			if (c == 'l') {
-				redraw = 1;
-			} else if (c == 'q') {
-				break;
-			} else if (c == 'r') {
-				reverse = !reverse;
-			} else if (c == 'b') {
-				forward = 0;
-			} else if (c == 'f') {
-				forward = 1;
-			} else if (c == 's') {
-				if (++sorting > STSORT_MAX)
-					sorting = 0;
-			}
-		}
-	} /* while */
-
-out:
-	printw("\n");
-	curs_set(1);
-	/* nocbreak(); XXX - endwin() should make this redundant */
-	endwin();
-
 	free(tstable);
 	if (ret != 0)
 		perror(errstr);
@@ -1959,18 +1759,6 @@
 
 
 #ifdef STATETOP
-static void sig_resize(s)
-	int s;
-{
-	handle_resize = 1;
-}
-
-static void sig_break(s)
-	int s;
-{
-	handle_break = 1;
-}
-
 static char *getip(v, addr)
 	int v;
 	i6addr_t *addr;

#!/usr/local/bin/php -f
<?php
/*
	$Id: rc.bootup 550 2013-11-24 16:54:44Z lgrahl $
	part of m0n0wall (http://m0n0.ch/wall)
	
	Copyright (C) 2003-2006 Manuel Kasper <mk@neon1.net>.
	All rights reserved.
	
	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:
	
	1. Redistributions of source code must retain the above copyright notice,
	   this list of conditions and the following disclaimer.
	
	2. Redistributions in binary form must reproduce the above copyright
	   notice, this list of conditions and the following disclaimer in the
	   documentation and/or other materials provided with the distribution.
	
	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
	AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
	OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	POSSIBILITY OF SUCH DAMAGE.
*/

	require_once("globals.inc");

	/* let the other functions know we're booting */
	$g['booting'] = TRUE;
	touch("{$g['varrun_path']}/booting");

	/* parse the configuration and include all functions used below */
	require_once("config.inc");
	require_once("functions.inc");
	
	/* check whether config reset is desired (via hardware button on WRAP/ALIX) */
	system_check_reset_button();

	/* flash some lights */
	ledindicator();
		
	/* convert configuration, if necessary */
	convert_config();
	
	/* enable hardware crypto built into CPU, if available */
	enable_cpuhwcrypto();
	
	/* load optional kernel modules */
	load_kernel_modules();
	
	/* automatically reassign interfaces if necessary */
	interfaces_autoreassign();
	
	/* execute the rc.early scripts of extensions */
	system_do_extensions(1);
	
	/* run any early shell commands specified in config.xml */
	system_do_shell_commands(1);
	
	/* save dmesg output to file */
	system_dmesg_save();
	
	/* set up our timezone */
	system_timezone_configure();
	
	/* set up our hostname */
	system_hostname_configure();
	
	/* make hosts file */
	system_hosts_generate();
	
	/* generate resolv.conf */
	system_resolvconf_generate();

	/* configure sysctls from advanced setup page */
	configure_advanced_sysctls();
	
	/* establish ipfilter ruleset */
	filter_configure();
	
	/* configure loopback interface */
	interfaces_loopback_configure();
	
	/* set up VLAN virtual interfaces */
	interfaces_vlan_configure();
	
	/* set up WLAN subinterfaces */
	interfaces_wlan_configure();
	
	/* set up LAN interface */
	interfaces_lan_configure();
	
	/* set up WAN interface */
	interfaces_wan_configure();
	
	/* set up Optional interfaces */
	interfaces_optional_configure();
	
	/* resync ipfilter */
	filter_resync();
	
	/* start ipmon */
	filter_ipmon_start();
	
	/* set up static routes */
	system_routing_configure();
	
	/* enable routing */
	system_routing_enable();
	
	/* start syslogd */
	system_syslogd_start();
	
	/* start web server */
	system_webgui_start();
	
	/* configure console menu */
	system_console_configure();
	
	/* start dnsmasq service */
	services_dnsmasq_configure();

	/* start the NTP client */
	system_ntp_configure();
	
	/* start dyndns service */
	services_dyndns_configure();
	
	/* static IP address? -> attempt DNS update */
	if (is_ipaddr($config['interfaces']['wan']['ipaddr']))
		services_dnsupdate_process();
	
	/* start DHCP service */
	services_dhcpd_configure();
	
	/* start rtadvd */
	interfaces_rtadvd_configure();
	
	/* start DHCPv6 service */
	services_dhcp6s_configure();
	
	/* start DHCP relay */
	services_dhcrelay_configure();
	
	/* start SNMP service */
	services_snmpd_configure();
	
	/* start proxy ARP service */
	services_proxyarp_configure();
	
	/* start pptpd */
	vpn_pptpd_configure();

	/* start l2tp */
	vpn_ipsec_l2tp_configure();
	
	/* start traffic shaper */
	shaper_configure();
	
	/* start IPsec tunnels */
	vpn_ipsec_configure();
	
	/* start the captive portal */
	captiveportal_configure();
	
	/* start Voucher support */
	voucher_configure();
	
	/* start Scheduler */
	services_croen_configure();
	
	/* set up termcap (for the firewall states page) */
	system_set_termcap();
	
	/* execute the rc scripts of extensions */
	system_do_extensions();
	
	/* run any shell commands specified in config.xml */
	system_do_shell_commands();
	
	/* enable HD standby */
	system_set_harddisk_standby();
	
	/* done */
	unlink("{$g['varrun_path']}/booting");
?>
